{"version":3,"sources":["components/select-card/select-card.tsx","components/question-card/question-card.tsx","API.ts","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SelectCard","selectedCategory","selectCategory","selectDifficulty","selectedDifficulty","useState","categories","setCategories","useEffect","a","fetch","json","returnedCategories","trivia_categories","fetchCategories","className","value","onChange","length","map","category","id","name","QuestionCard","question","totalQuestions","answers","checkAnswer","questionNumber","userAnswer","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","fetchQestions","setError","setGameOver","url","data","response_code","results","array","incorrect_answers","correct_answer","sort","Math","random","App","setSelectedCategory","setSelectedDifficulty","questions","setQuestions","setquestionNumber","score","setScore","gameOver","userAnswers","setUserAnswers","restart","setRestart","loading","setLoading","error","startQuiz","newQuestions","e","target","currentTarget","correct","prev","answerObject","TOTAL_QUESTIONS","nextQ","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3996d87.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport \"./select-card.css\";\n\ninterface Props {\n\tselectedCategory: string;\n\tselectCategory: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n\tselectDifficulty: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n\tselectedDifficulty: string;\n}\n\nconst SelectCard: React.FC<Props> = ({\n\tselectedCategory,\n\tselectCategory,\n\tselectDifficulty,\n\tselectedDifficulty,\n}) => {\n\tconst [categories, setCategories] = useState<{ id: number; name: string }[]>(\n\t\t[]\n\t);\n\n\tuseEffect(() => {\n\t\tconst cateogriesUrl = \"https://opentdb.com/api_category.php\";\n\t\tconst fetchCategories = async () => {\n\t\t\tconst returnedCategories = await (await fetch(cateogriesUrl)).json();\n\t\t\tsetCategories(returnedCategories.trivia_categories);\n\t\t};\n\t\tfetchCategories();\n\t\treturn function cleanUp() {\n\t\t\tsetCategories([]);\n\t\t};\n\t}, []);\n\treturn (\n\t\t<div className=\"select-card\">\n\t\t\t<div className=\"custom-select\">\n\t\t\t\t<label>\n\t\t\t\t\t<span className=\"diff-span\">difficulty:</span>\n\t\t\t\t\t<select value={selectedDifficulty} onChange={selectDifficulty}>\n\t\t\t\t\t\t<option value=\"easy\">Easy</option>\n\t\t\t\t\t\t<option value=\"medium\">Medium</option>\n\t\t\t\t\t\t<option value=\"hard\">Hard</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<span className=\"custom-arrow\"></span>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<div className=\"custom-select\">\n\t\t\t\t<label>\n\t\t\t\t\t<span className=\"category-span\">category:</span>\n\t\t\t\t\t<select value={selectedCategory} onChange={selectCategory}>\n\t\t\t\t\t\t<option value=\"\">Any Category</option>\n\t\t\t\t\t\t{categories.length > 0\n\t\t\t\t\t\t\t? categories.map((category) => (\n\t\t\t\t\t\t\t\t\t<option key={category.id} value={category.id}>\n\t\t\t\t\t\t\t\t\t\t{category.name}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t: null}\n\t\t\t\t\t</select>\n\t\t\t\t\t<span className=\"custom-arrow\"></span>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SelectCard;\n","import React from \"react\";\n\nimport \"./question-card.css\";\n\n//interface\nimport { AnswerObject } from \"../../interfaces\";\n\ninterface QuizProps {\n\tquestion: string;\n\ttotalQuestions: number;\n\tanswers: string[];\n\tcheckAnswer: (e: React.MouseEvent<HTMLButtonElement>) => void;\n\tquestionNumber: number;\n\tuserAnswer: AnswerObject | null;\n}\n\nconst QuestionCard: React.FC<QuizProps> = ({\n\tquestion,\n\ttotalQuestions,\n\tanswers,\n\tcheckAnswer,\n\tquestionNumber,\n\tuserAnswer,\n}) => {\n\treturn (\n\t\t<div className=\"question-card\">\n\t\t\t<p className=\"number\">\n\t\t\t\tQuestion: {questionNumber} / {totalQuestions}\n\t\t\t</p>\n\t\t\t<p className=\"question\" dangerouslySetInnerHTML={{ __html: question }} />\n\t\t\t<div className=\"answers\">\n\t\t\t\t{answers.map((answer) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName={`answer ${\n\t\t\t\t\t\t\t//add class acording answer\n\t\t\t\t\t\t\tuserAnswer?.correctAnswer === answer &&\n\t\t\t\t\t\t\tuserAnswer?.answer === answer\n\t\t\t\t\t\t\t\t? \"correct\"\n\t\t\t\t\t\t\t\t: userAnswer?.answer === answer\n\t\t\t\t\t\t\t\t? \"clicked-button\"\n\t\t\t\t\t\t\t\t: userAnswer?.correctAnswer === answer\n\t\t\t\t\t\t\t\t? \"correct\"\n\t\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tdisabled={userAnswer ? true : false}\n\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\tonClick={checkAnswer}\n\t\t\t\t\t\tkey={answer}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: answer }}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default QuestionCard;\n","import { shuffleArray } from \"./utils\";\n\nimport { Question } from \"./interfaces\";\n\n//API call\nexport const fetchQestions = async (\n\tsetError: (value: React.SetStateAction<string>) => void,\n\tsetGameOver: (value: React.SetStateAction<boolean>) => void,\n\turl: string\n) => {\n\ttry {\n\t\tconst data = await (await fetch(url)).json();\n\t\tif (data.response_code === 0) {\n\t\t\tsetError(\"\");\n\t\t\treturn data.results.map((question: Question) => ({\n\t\t\t\t...question,\n\t\t\t\tanswers: shuffleArray([\n\t\t\t\t\t...question.incorrect_answers,\n\t\t\t\t\tquestion.correct_answer,\n\t\t\t\t]),\n\t\t\t}));\n\t\t} else if (data.response_code === 1) {\n\t\t\tsetError(\"no results for this category\");\n\t\t\tsetGameOver(true);\n\t\t}\n\t} catch {\n\t\tsetError(\"something went wrong please try again\");\n\t\tsetGameOver(true);\n\t}\n};\n","export const shuffleArray = (array: any[]) =>\n\t[...array].sort(() => Math.random() - 0.5);\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\n//components\nimport SelectCard from \"./components/select-card/select-card\";\nimport QuestionCard from \"./components/question-card/question-card\";\n\n//API Call\nimport { fetchQestions } from \"./API\";\n\n//interfaces\nimport { AnswerObject, QuestionsState } from \"./interfaces\";\n\n//question amount\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n\t//states\n\tconst [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n\tconst [selectedDifficulty, setSelectedDifficulty] = useState<string>(\"easy\");\n\tconst [questions, setQuestions] = useState<QuestionsState[]>([]);\n\tconst [questionNumber, setquestionNumber] = useState(0);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [restart, setRestart] = useState(false);\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState<string>(\"\");\n\n\t// API URL\n\tconst url = `https://opentdb.com/api.php?amount=10${\n\t\tselectedCategory ? `&category=${selectedCategory}` : \"\"\n\t}&difficulty=${selectedDifficulty}&type=multiple`;\n\n\tconst startQuiz = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\t\tconst newQuestions = await fetchQestions(setError, setGameOver, url);\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetquestionNumber(0);\n\t\tsetUserAnswers([]);\n\t\tsetLoading(false);\n\t};\n\n\tconst selectDifficulty = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tsetSelectedDifficulty(e.target.value);\n\t};\n\n\tconst selectCategory = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tsetSelectedCategory(e.target.value);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t// User's answer\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\t// Check answer against correct answer\n\t\t\tconst correct = questions[questionNumber].correct_answer === answer;\n\t\t\t// Increase score if answer is correct\n\t\t\tif (correct) {\n\t\t\t\tsetScore((prev) => prev + 1);\n\t\t\t}\n\t\t\t// Save the answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[questionNumber].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[questionNumber].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t\tif (questionNumber === TOTAL_QUESTIONS - 1) {\n\t\t\tsetRestart(true);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\t// Move on to the next question if it's not the last question\n\t\tconst nextQ = questionNumber + 1;\n\n\t\tif (nextQ === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetquestionNumber(nextQ);\n\t\t}\n\t};\n\n\tconst handleRestart = () => {\n\t\tsetRestart(false);\n\t\tsetGameOver(true);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"title\">Quiz app</h1>\n\t\t\t{gameOver && (\n\t\t\t\t<>\n\t\t\t\t\t<SelectCard\n\t\t\t\t\t\tselectCategory={selectCategory}\n\t\t\t\t\t\tselectedCategory={selectedCategory}\n\t\t\t\t\t\tselectDifficulty={selectDifficulty}\n\t\t\t\t\t\tselectedDifficulty={selectedDifficulty}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"start\" onClick={startQuiz}>\n\t\t\t\t\t\tstart\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{!gameOver && !restart && !loading ? (\n\t\t\t\t<p className=\"score\">Score: {score}</p>\n\t\t\t) : null}\n\t\t\t{loading ? <div className=\"loading-spinner\"></div> : null}\n\t\t\t{gameOver && error ? <h1 className=\"error\">{error}</h1> : null}\n\t\t\t{!gameOver && restart ? (\n\t\t\t\t<h2 className=\"final-score\">Your score was {score}</h2>\n\t\t\t) : null}\n\t\t\t{restart ? (\n\t\t\t\t<button className=\"restart\" onClick={handleRestart}>\n\t\t\t\t\t&#8634;\n\t\t\t\t</button>\n\t\t\t) : null}\n\t\t\t<div className=\"question-card-wrapper\">\n\t\t\t\t{!gameOver && !loading && questions.length > 0 && !restart ? (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[questionNumber].question}\n\t\t\t\t\t\tanswers={questions[questionNumber].answers}\n\t\t\t\t\t\tcheckAnswer={checkAnswer}\n\t\t\t\t\t\tquestionNumber={questionNumber + 1}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[questionNumber] : null}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{!gameOver &&\n\t\t\t\tuserAnswers.length === questionNumber + 1 &&\n\t\t\t\tquestionNumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\t\tnext\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}